
* Wish List

  This is a list of features I would like to implement. There is not a
  particular order, and this is not guaranteed to be up to date. Individual
  features will be broken into smaller pieces as I get started on them.

** Real macros
   To really implement a useful Scheme tool, I need hygenic macros. This would
   be difficult, but would allow me to load all of the Chez Scheme definitions
   without writing each of them myself. Without this I need to write each
   expansion by hand using pattern matches on the syntax tree, and need to debug
   any ways in which my implementations deviate from Chez's behavior.

** A linter
   Currently I am stuck between writing an abstract interpreter and more static
   tools. Somewhere in here, there should really be some kind of linter. It could
   give suggestions based on the types of expressions (determined statically or
   dynamically) and could even give code style feedback. The code style feedback
   would need to be integrated into the parser itself, which would be tricky.

** Mutation warnings
   Doing something like this will make you sad:

   #+BEGIN_SRC scheme
  (define a 10)
  (+ a a a (begin (set! a 1) a) a a a)
   #+END_SRC

   I would like to be able to detect when someone could potentially observe the
   non deterministic/undefined behavior of a Scheme program and warn them to
   stop. This would really just end up being the detection of whenever someone
   uses side effectful code in their argument parameters.

** Web UI
   Definitely *not* a web Scheme editor. What I would ideally like is just a way
   to upload a file. This file would then be sent to the server, and it would
   either be sent through an analysis or it would be sent through an
   interpreter. On response, the UI would display a generated interactive form
   which would show things like predicted types of individual expressions.
